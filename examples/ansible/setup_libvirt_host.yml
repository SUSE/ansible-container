---

#
# A example playbook showing how the setup an ALP system as a libvirt host.
#

# use ansible-playbook setup_libvirt_host.yml -e "playbook_path=$(pwd)" -e "ansible_user=$(whoami)" -e "reboot_mode=auto" to enable auto reboot while running as root ensure ansible container is installed as root.

- name: Setup ALP system as a libvirt host
  hosts: alphost
  vars:
    ansible_playbook_basename: "setup_libvirt_host.yml"
    ansible_user: "{{ ansible_user }}"
    playbook_path: "{{ playbook_path }}"
    workload:
      name: libvirtd
      image: registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads/kvm:latest
      labels:
        install: install
        uninstall: uninstall
      required_pkgs:
        - kernel-default
        - "-kernel-default-base"
        - netcat-openbsd
        - python3-libvirt-python
        - python3-lxml
        - swtpm
      service:
        name: libvirtd
        wait_for:
          path: /var/run/libvirt/libvirt-sock
  tasks:
    - name: Retrieve image for workload {{ workload.name }}
      become: true
      containers.podman.podman_image:
        name: "{{ workload.image }}"
        state: present
      register: retrieve_workload_image
      failed_when: retrieve_workload_image is failed

    - name: Install tools for workload {{ workload.name }}
      become: true
      ansible.builtin.command: >-
        podman container runlabel {{ workload.labels.install }} {{ workload.image }}
      register: workload_runlabel_install
      changed_when: "'already exist' not in workload_runlabel_install.stdout"
      failed_when: workload_runlabel_install is failed

    - name: Install required packages, if any, for workload {{ workload.name }}
      become: true
      ansible.builtin.package:
        name: "{{ workload.required_pkgs }}"
        state: present
      register: required_pkgs_install
      when: ((workload.required_pkgs | default([])) | length) > 0
      failed_when: required_pkgs_install is failed


    - name: Handle manual reboot, if needed
      when: required_pkgs_install.changed and (reboot_mode | default('manual')) == 'manual'
      block:

        - name: Print message requesting immediate reboot
          ansible.builtin.debug:
            msg: >-
              Required system packages have been installed via
              transactional-update to support workload
              {{ workload.name }}.
              An immediate reboot is required to activate these
              packages before proceding. Once reboot has completed
              please re-run this playbook.

        - name: Request immediate reboot
          ansible.builtin.fail:
            msg: "Reboot required"

    - name: Handle auto reboot, if needed # Check if automatic reboot is required
      include_role:
        name: alp_reboot
        tasks_from: start
      when: required_pkgs_install.changed and (reboot_mode | default('manual')) == 'auto'

    - name: Setup service for workload {{ workload.name }}
      when: workload.service is defined
      block:
        - name: Ensure service can be started for workload {{ workload.name }}
          become: true
          ansible.builtin.systemd_service:
            name: "{{ workload.service.name }}"
            state: "started"
          register: workload_service_start

        - name: Enable service to start on reboot for workload {{ workload.name }}   # Enable the service to start on reboot
          become: true
          ansible.builtin.systemd_service:
            name: "{{ workload.service.name }}"
            enabled: true
          when: workload_service_start is success

        - name: Wait for service to be ready for workload {{ workload.name }}
          when: workload.service.wait_for is defined
          block:
            - name: Check service path for workload {{ workload.name }}
              ansible.builtin.wait_for:
                path: "{{ workload.service.wait_for.path }}"
              when: workload.service.wait_for.path is defined

            - name: Check service port for workload {{ workload.name }}
              ansible.builtin.wait_for:
                port: "{{ workload.service.wait_for.port }}"
              when: workload.service.wait_for.port is defined

- name: Verify that Libvirt is operational
  hosts: alphost
  tasks:
    - name: Query running Libvirt VMs
      become: true
      community.libvirt.virt:
        command: list_vms
      register: virt_list_vms

    - name: Report running Libvirt VMs, if any
      ansible.builtin.debug:
        msg: "Running VMs: {{ virt_list_vms.list_vms | join(', ') }}"
      when: ((virt_list_vms.list_vms | default([])) | length) > 0

    - name: clean up # Cleanup tasks
      include_role:
        name: alp_reboot
        tasks_from: end
      when: (reboot_mode | default('manual')) == 'auto' # If reboot mode is automatic
