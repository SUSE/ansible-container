---

#
# A example playbook showing how the create a openSUSE Tumbleweed VM.
#

# Ensure the system is ready to act as a libvirt host.
# NOTE: A reboot may be required if packages need to be installed.
- name: Setup ALP system as a libvirt host
  import_playbook: setup_libvirt_host.yml
  tags: libvirt

- name: Create an openSUSE Tumbleweed appliance
  hosts: alphost
  vars:
    appliance:
      name: tumbleweed
      mirror: https://download.opensuse.org/tumbleweed/appliances
      image: openSUSE-Tumbleweed-Minimal-VM.x86_64-kvm-and-xen
      format: qcow2
      checksum: sha256
      vcpus: 2
      memory_mb: 2048
      disk_size_gb: 30
    libvirt:
      images: /var/lib/libvirt/images
      network: default_network

  tasks:

    - name: Check if we already have the openSUSE Tumbleweed image
      ansible.builtin.stat:
        path: "{{ libvirt.images }}/{{ appliance.image }}.{{ appliance.format }}"
      register: stat_vm_image

    - name: Download openSUSE Tumbleweed appliance image
      become: true
      ansible.builtin.get_url:
        dest: "{{ libvirt.images }}"
        url: "{{ item.url }}"
        checksum: "{{ appliance.checksum }}:{{ item.url }}.{{ appliance.checksum }}"
        mode: '0644'
      loop:
        - name: "{{ appliance.image }}"
          url: "{{ appliance.mirror }}/{{ appliance.image }}.{{ appliance.format }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - not stat_vm_image.stat.exists

    - name: Query list of configured libvirt networks
      become: true
      community.libvirt.virt_net:
        command: list_nets
      register: virt_net_list_nets

    - name: Fail if required network is not available
      ansible.builtin.fail:
        msg: "ERROR: required '{{ libvirt.network }}' missing!"
      when:
        - libvirt.network not in virt_net_list_nets.list_nets

    - name: Query list of libvirt VMs
      become: true
      community.libvirt.virt:
        command: list_vms
      register: virt_list_vms

    - name: Create the openSUSE Tumbleweed appliance if not running
      become: true
      ansible.builtin.command: >-
        /usr/local/bin/virt-install
          --connect qemu:///system
          --import
          --name {{ appliance.name }}
          --osinfo opensusetumbleweed
          --virt-type kvm
          --hvm
          --machine q35
          --boot hd
          --cpu host-passthrough
          --video vga
          --console pty,target_type=virtio
          --noautoconsole
          --network network={{ libvirt.network }}
          --rng /dev/urandom
          --vcpu {{ appliance.vcpus }}
          --memory {{ appliance.memory_mb }}
          --cloud-init
          --disk size={{ appliance.disk_size_gb }},
          backing_store={{ libvirt.images }}/{{ appliance.image }}.{{ appliance.format }},
          backing_format={{ appliance.format }},
          bus=virtio,cache=none
          --graphics vnc,listen=0.0.0.0
      register: virt_install_vm
      changed_when:
        - "virt_install_vm.rc == 0"
      when:
        - ('tumbleweed' not in virt_list_vms.list_vms)

    - name: Query list of libvirt VMs
      become: true
      community.libvirt.virt:
        command: list_vms
      register: virt_list_vms

    - name: Show that Tumbleweed appliance has been created
      ansible.builtin.debug:
        msg: "Running VMs: {{ virt_list_vms.list_vms | join(', ') }}"
      when:
        - ('tumbleweed' in virt_list_vms.list_vms)
